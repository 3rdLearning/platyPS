version: 0.3.1.{build}

install:
    - cinst pester

init:
    - git config --global core.autocrlf true

before_build:
    - nuget restore

build_script:
    - ps: |
        $ErrorActionPreference = 'Stop'
        .\build.ps1 -Configuration Release

after_test:
    - ps: |
        # We run Pester tests in after_test step
        # we don't want to use test_script so Xunit tests just run
        # appveyor doesn't run after_test, if tests failed.
        #
        # Pester tests produce artifacts in .\out directory
        $pesterTestResultsFile = ".\TestsResults.xml"
        $res = Invoke-Pester -OutputFormat NUnitXml -OutputFile $pesterTestResultsFile -PassThru
        (New-Object 'System.Net.WebClient').UploadFile("https://ci.appveyor.com/api/testresults/nunit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path $pesterTestResultsFile))
        # Trying to fail the build
        if ($res.FailedCount -gt 0) {
            throw "$($res.FailedCount) tests failed."
        }

on_finish:
    - ps: |
        $ErrorActionPreference = 'Stop'
        try {
            $stagingDirectory = (Resolve-Path ..).Path
            $zipFile = Join-Path $stagingDirectory "platyPS-$($env:APPVEYOR_BUILD_VERSION).zip"
            $zipFileCab = Join-Path $stagingDirectory "CabTesting-$($env:APPVEYOR_BUILD_VERSION).zip"
            Add-Type -assemblyname System.IO.Compression.FileSystem
            [System.IO.Compression.ZipFile]::CreateFromDirectory("$pwd\out\platyPS", $zipFile)
            [System.IO.Compression.ZipFile]::CreateFromDirectory("$pwd\out\CabTesting", $zipFileCab)
            @(
                # You can add other artifacts here
                (ls $zipFile),
                (ls $zipFileCab),
                (ls .\out -File)
            # flattering
            ) | % {$_} | ? {$_} |% { Push-AppveyorArtifact $_.FullName }
        } catch {
            Write-Host -Foreground Red $_
        }
